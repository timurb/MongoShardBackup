#!/usr/bin/env ruby

# == Synopsis
#
#   Backs up sharded mongo cluster located on EC2
#
# == Usage
#
#   ec2shardbackup [OPTION] mongos.address
#
#   -h, --help
#       show help
#
#   -d /dev/sdb1, --device /dev/sdx
#       set the EBS device to backup
#       Default: /dev/sda1
#
#   -t DESC_STRING, --description DESC_STRING
#       set the description of snapshots
#       Default: 'Backup of $c($i,$v), $d [$n]'
#
#       Legend:
#         $c  cluster hostname
#         $i  instance id
#         $v  volume id
#         $d  today's date
#         $n  'Created by MongoShardBackup'
#
#   -e ENV_NAME, --env ENV_NAME
#       set the tag with environment name
#       Default: mongos.address
#
#   -T tag=val, --tag tag=val
#       set additional tags (several -T options may be specified)
#
#   -v [level], --verbose [level]
#       show some log information. the less level is the more verbose logging
#       you get. level defaults to 1 if not specified.
#       Default: no logging
#

require 'rubygems'
require 'mongo_shard_backup'
require 'getoptlong'
require 'rdoc/usage'

OPTIONS =  [
  [ '--help', '-h', GetoptLong::NO_ARGUMENT ],                # 0
  [ '--device', '-d', GetoptLong::OPTIONAL_ARGUMENT ],        # 1
  [ '--description', '-t', GetoptLong::OPTIONAL_ARGUMENT ],   # 2
  [ '--env','-e', GetoptLong::OPTIONAL_ARGUMENT ],            # 3
  [ '--tag', '-T', GetoptLong::OPTIONAL_ARGUMENT ],           # 4
  [ '--verbose', '-v', GetoptLong::OPTIONAL_ARGUMENT ]        # 5
]

options={}
opts=GetoptLong.new( *OPTIONS )

options[:tags]={}
opts.each do |opt,arg|
  case opt
     when '--help'
       RDoc::usage
     when OPTIONS[1][0]
       options[:device_name] = arg
     when OPTIONS[2][0]
       options[:description] = arg
     when OPTIONS[3][0]
       options[:env] = arg
     when OPTIONS[4][0]
       tag,val = arg.split("=")
       options[:tags].merge!({tag => val})
     when OPTIONS[5][0]
       arg = "1" if arg.empty?
       options[:verbose] = arg.to_i
   end
end

if ARGV.length != 1
 puts "Missing argument (try --help)"
 exit 1
end


MongoShardBackup.backup( ARGV[0], options ).each { |s| puts s }
